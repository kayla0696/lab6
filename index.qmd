---
title: "ESS330 Lab 6"
format: html
editor: 
  markdown: 
    wrap: 72
---

```{r}
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(ggthemes)
```

```{r}
root  <- 'https://gdex.ucar.edu/dataset/camels/file'
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'data/camels_attributes_v2.0.pdf')
```

```{r}
library(glue)
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
remote_files  <- glue('{root}/camels_{types}.txt')
local_files   <- glue('data/camels_{types}.txt')
```

```{r}
walk2(remote_files, local_files, download.file, quiet = TRUE)
# Read and merge data
camels <- map(local_files, readr::read_delim, show_col_types = FALSE)
camels <- power_full_join(camels ,by = 'gauge_id')
```

Question 1: zero_q_freq is the fraction of days with zero flow over the
entire period of record.
```{r}
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()
```

```{r}
library(ggplot2)
library(ggthemes)
library(tidyverse)
camels_long <- camels %>%
  select(gauge_lon, gauge_lat, aridity, p_mean) %>%
  pivot_longer(cols = c(aridity, p_mean), names_to = "variable", values_to = "value")

# Create facetted map
ggplot(data = camels_long, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = value)) +
  scale_color_gradient(low = "lightyellow", high = "darkblue", name = "Value") +
  ggthemes::theme_map() +
  facet_wrap(~ variable, ncol = 2, labeller = as_labeller(c(
    aridity = "Aridity Index",
    p_mean = "Mean Precipitation (mm)"
  ))) +
  labs(title = "CAMELS Basin Characteristics: Aridity & Mean Precipitation",
       x = "Longitude",
       y = "Latitude")
```
```{r}
camels |> 
  select(aridity, p_mean, q_mean) |> 
  drop_na() |> 
  cor()
```
```{r}
# Create a scatter plot of aridity vs rainfall
ggplot(camels, aes(x = aridity, y = p_mean)) +
  # Add points colored by mean flow
  geom_point(aes(color = q_mean)) +
  # Add a linear regression line
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  # Apply the viridis color scale
  scale_color_viridis_c() +
  # Add a title, axis labels, and theme (w/ legend on the bottom)
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```
```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  # Apply log transformations to the x and y axes
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```
```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  # Apply a log transformation to the color scale
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        # Expand the legend width ...
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```
```{r}
set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a 
# recipe. So, we'll do it here.
camels <- camels |> 
  mutate(logQmean = log(q_mean))

# Generate the split
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)
```
```{r}
# Create a recipe to preprocess the data
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  # Log transform the predictor variables (aridity and p_mean)
  step_log(all_predictors()) %>%
  # Add an interaction term between aridity and p_mean
  step_interact(terms = ~ aridity:p_mean) |> 
  # Drop any rows with missing values in the pred
  step_naomit(all_predictors(), all_outcomes())
```
```{r}
# Prepare the data
baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

# Interaction with lm
#  Base lm sets interaction terms with the * symbol
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)
```
```{r}
test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```
```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```
```{r}
ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  # Apply a gradient color scale
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```
```{r}
# Define model
lm_model <- linear_reg() %>%
  # define the engine
  set_engine("lm") %>%
  # define the mode
  set_mode("regression")

# Instantiate a workflow ...
lm_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(lm_model) %>%
  # Fit the model to the training data
  fit(data = camels_train) 

# Extract the model coefficients from the workflow
summary(extract_fit_engine(lm_wf))$coefficients
```
```{r}
# From the base implementation
summary(lm_base)$coefficients
```
```{r}
#
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
```
```{r}
metrics(lm_data, truth = logQmean, estimate = .pred)
```
```{r}
ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```
```{r}
library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(rf_model) %>%
  # Fit the model
  fit(data = camels_train) 
```
```{r}
rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)
```

```{r}
metrics(rf_data, truth = logQmean, estimate = .pred)
```
```{r}
ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```
```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)
```
```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```

#Question 3
```{r}
library(tidymodels)
library(baguette)
library(xgboost)

# XGBoost model
xgb_model <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")

# Bagged Neural Network model
nnet_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")
```
```{r}
# Build a list of models
models <- list(
  linear_regression = lm_model,
  random_forest     = rf_model,
  xgboost           = xgb_model,
  neural_net        = nnet_model
)

# Create workflow set
wf <- workflow_set(
  preproc = list(recipe = rec),
  models  = models
) %>%
  workflow_map("fit_resamples", resamples = camels_cv)
```
```{r}
# Visualize results
autoplot(wf)

# Rank by R-squared
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```
#Question 4: Build Your Own
```{r}
set.seed(2025)

# Log-transform q_mean a priori
camels <- camels %>%
  mutate(logQmean = log(q_mean))

# Initial split: 75% train, 25% test
camels_split <- initial_split(camels, prop = 0.75)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

# 10-fold cross-validation set
camels_cv <- vfold_cv(camels_train, v = 10)

```
```{r}
logQmean ~ aridity + p_mean + pet_mean + elev_mean + slope_mean + area_gages2

```
```{r}
rec <- recipe(logQmean ~ aridity + p_mean + pet_mean + elev_mean + slope_mean + area_gages2, data = camels_train) %>%
  step_log(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) %>%
  step_normalize(all_predictors()) %>%
  step_naomit(all_predictors(), all_outcomes())

```
```{r}
# Random Forest
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

# XGBoost
xgb_model <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")

# Support Vector Machine (SVM)
svm_model <- svm_rbf() %>%
  set_engine("kernlab") %>%
  set_mode("regression")

```
```{r}
wf_set <- workflow_set(
  preproc = list(camels_recipe = rec),
  models = list(
    rf = rf_model,
    xgb = xgb_model,
    svm = svm_model
  )
) %>%
  workflow_map("fit_resamples", resamples = camels_cv)

```
```{r}
# Visualize
autoplot(wf_set)

# Rank by R-squared
rank_results(wf_set, rank_metric = "rsq", select_best = TRUE)

```
```{r}
final_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(xgb_model) %>%
  fit(data = camels_train)

```
```{r}
xgb_test <- augment(final_wf, new_data = camels_test)

```
```{r}
ggplot(xgb_test, aes(x = logQmean, y = .pred, color = aridity)) +
  geom_point(alpha = 0.7) +
  geom_abline(linetype = "dashed", color = "red") +
  scale_color_viridis_c() +
  theme_minimal() +
  labs(
    title = "XGBoost Model: Observed vs Predicted Log Mean Flow",
    x = "Observed Log Mean Flow",
    y = "Predicted Log Mean Flow",
    color = "Aridity Index"
  )

```
Based on cross-validation and test set evaluation, the XGBoost model performed best with RÂ² > 0.92, suggesting strong predictive accuracy. The combination of climate (precipitation, PET, aridity), terrain (slope, elevation), and basin area successfully captured streamflow patterns.

I would move forward with the XGBoost model for its balance of performance, flexibility, and ability to model complex, non-linear relationships in hydrologic systems.


